# ex: set expandtab softtabstop=4 shiftwidth=4: -*- cperl-indent-level: 4; indent-tabs-mode: nil -*-

# ${license-info}
# ${developer-info}
# ${author-info}

################################################################################
# Coding style: emulate <TAB> characters with 4 spaces, thanks!
################################################################################
#
# Component to configure PAM
#
###############################################################################

package NCM::Component::pam;

#
# a few standard statements, mandatory for all components
#

use strict;
use NCM::Component;
use vars qw(@ISA $EC);
@ISA = qw(NCM::Component);
$EC=LC::Exception::Context->new->will_store_all;

use EDG::WP4::CCM::Element qw(BOOLEAN);

##########################################################################
sub Configure {
##########################################################################
  my ($self,$config)=@_;
  my $prefix = "/software/components/pam";
  # Now do something...
  if (!$config->elementExists("$prefix")) {
      return 0;
  }
  my $inf = $config->getElement("$prefix")->getTree;

  foreach my $service (sort keys %{$inf->{services}}) {
      my $sinfo = $inf->{services}->{$service};

      my $body = "#%PAM-1.0\n";
      $body .= "# Generated by ncm-pam\n";
      my $spacer = "";
      foreach my $type (sort keys %$sinfo) {
          $body .= $spacer;
          my $pos = 0;
          foreach my $spec (@{$sinfo->{$type}}) {
              if ($spec->{module} eq 'include') {
                  # Special case the include directive
                  $body .= sprintf("%-11s include %s\n", $type, $spec->{options}->{service});
                  $pos++;
                  next;
              }

              my $modpath = $inf->{modules}->{$spec->{module}}->{path};
              my $opts = "";

              # See if we have any ACLs defined for pam_filelist, get those
              # installed before we change any pam definitions.
              if ($spec->{module} eq 'filelist') {
                  if (exists $spec->{allow}) {
                      $self->make_acl_file($spec->{allow});
                  }
                  if (exists $spec->{deny}) {
                      $self->make_acl_file($spec->{deny});
                  }
              }

              if (exists $spec->{options}) {
                  my @o = ();
                  foreach my $kv (sort keys %{$spec->{options}}) {
                      if ($config->getElement("$prefix/services/$service/$type/$pos/options/$kv")->isType(BOOLEAN)) {
                          push(@o, $kv) if $spec->{options}->{$kv};
                      } else {
                          push(@o, "$kv=$spec->{options}->{$kv}");
                      }
                  }
                  $opts = join(" ", @o);
              }
              $body .= sprintf("%-11s %-13s %s %s\n", $type, $spec->{control}, $modpath, $opts);
              $pos++;
          }
          $spacer = "\n";
      }

      my $file = "$inf->{directory}/$service";
      $file =~ s{//+}{/}g;
      my $mode = $inf->{services}->{$service}->{perm} || "0444";
      my $result = LC::Check::file($file, 
                                   backup => ".OLD",
                                   contents => $body,
                                   owner => "root",
                                   group => "root",
                                   mode => $mode,
                                  );
      if ($result) {
          $self->log("updated $file");
      }
  }

  foreach my $access (sort keys %{$inf->{access}}) {
    my $file = $inf->{access}->{$access}->{filename};
    my $body = "# Generated by ncm-pam\n";
    foreach my $acl (@{$inf->{access}->{$access}->{acl}}) {
      my $permission = $acl->{permission};
      my $users      = $acl->{users};
      my $origins    = $acl->{origins};
      $body .= "$permission:$users:$origins\n";
    }

    if(defined($inf->{access}->{$access}->{lastacl})) {
       my $lastacl = $inf->{access}->{$access}->{lastacl};
       my $permission = $lastacl->{permission};
       my $users      = $lastacl->{users};
       my $origins    = $lastacl->{origins};
       $body .= "$permission:$users:$origins\n";
    }

    my $mode = 0444;

    my $result = LC::Check::file($file,
                                 backup => ".OLD",
                                 contents => $body,
                                 owner => "root",
                                 group => "root",
                                 mode => $mode,
                                );
      if ($result) {
          $self->log("updated $file");
      }
  }

  return 1;
}

sub make_acl_file {
    my ($self, $acl) = @_;
    my $content = join("\n", sort @{$acl->{items}});
    my $mode = $acl->{mode} || "0444";
    my $result = LC::Check::file($acl->{filename},
                                 backup => ".OLD",
                                 contents => $content,
                                 owner => "root",
                                 group => "root",
                                 mode => $mode,
                                );
      if ($result) {
          $self->log("updated ACL $acl->{filename}");
      }
}

1; #required for Perl modules
